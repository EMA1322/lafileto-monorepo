‚ö†Ô∏è IMPORTANTE ‚Äî ALCANCE DE ESTE PROMPT
- **NO GENERAR C√ìDIGO** ni estructuras de carpetas. Solo **relevar, analizar, estudiar y definir objetivos** + plan del backend.
- Entregables de esta fase: **inventarios, objetivos, decisiones arquitect√≥nicas, modelo de datos preliminar (conceptual), alcance de API, roadmap, riesgos y criterios de √©xito**.

Contexto (fijo)
- Proyecto: Men√∫ Digital ‚Äì La Fileto (ADMIN + Cliente) ¬∑ SPA con Vite + HTML + CSS + JS (ES Modules).
- N√∫cleo Front: hash routing con guardia RBAC, renderView con loader, header/sidebar por permisos, modales accesibles y snackbar global.
- Est√°ndares: BEM, mobile-first, accesibilidad b√°sica (roles/aria). Sin React/Tailwind.
- Convenci√≥n: nombres en ingl√©s (funciones/variables/IDs), comentarios y documentaci√≥n en espa√±ol.
- RBAC (semilla actual):
  ‚Ä¢ Administrador: R/W/U/D en todos los m√≥dulos.
  ‚Ä¢ Supervisor: Dashboard (R), Products/Categories (R/W/U), resto sin acceso (sin Delete).
- Datos mock (hasta la API): public/data/*.json. Persistencia Front actual: LocalStorage > JSON.
- Backend objetivo: Node.js + Express + MySQL, arquitectura **MVC + capa de servicios**, **RBAC server‚Äëside**, validaci√≥n, errores consistentes, documentaci√≥n y tests m√≠nimos.

Objetivo de este prompt
1) **Analizar el Front** (Cliente + Admin) para mapear **rutas, acciones y datos** que la API deber√° soportar.
2) **Definir objetivos** del backend (negocio y t√©cnicos), alcance de Fase 1 (MVP) y backlog posterior.
3) **Dise√±ar un plan** de arquitectura, **modelo de datos conceptual** (MySQL) y **alcance de API** (sin endpoints ni SQL a√∫n).
4) Establecer el **flujo de trabajo del backend**, criterios de calidad, riesgos y **estructura ideal conceptual** (sin scaffolding).
5) Mantener este chat como **hub** del backend (historial, decisiones, artefactos de an√°lisis).

Modo de uso
- Peg√° este prompt en un **chat nuevo** llamado ‚ÄúBackend ‚Äì Men√∫ Digital ‚Äì La Fileto (Plan)‚Äù. Ese hilo guardar√° el estado del backend.
- Trabajamos por **tandas** y **tokens**. Yo **no** emitir√© c√≥digo hasta que cambies de prompt a uno de construcci√≥n.

TANDAS DE AN√ÅLISIS (qu√© adjuntar)
---------------------------------
üîπ TANDA A ‚Äî Admin (SPA + RBAC: n√∫cleo y m√≥dulos)
Adjuntar:
- /admin/src/main.js
- /admin/src/utils/router.js
- /admin/src/utils/renderView.js
- /admin/index.html
- /admin/src/styles/global.css
- /admin/src/utils/helpers.js
- /admin/src/utils/modals.js
- /admin/src/utils/snackbar.js
- /admin/src/utils/auth.js
- /admin/src/utils/rbac.js
- public/data/rbac_permissions.json
- M√≥dulos Admin (si existen): users, products, categories, dashboard, login (HTML/CSS/JS)

üîπ TANDA B ‚Äî Cliente (SPA) + Datos mock
Adjuntar:
- /client/src/main.js
- /client/src/utils/router.js
- /client/src/utils/renderView.js
- /client/index.html
- /client/src/styles/global.css
- M√≥dulos Cliente: home, products, cart, confirm (HTML/CSS/JS)
- Datos mock: public/data/products.json, categories.json, users.json, roles.json (si existen)

üîπ TANDA C ‚Äî Restricciones y entorno
Adjuntar/describir:
- Hosting objetivo (Render/Railway/VPS), variables de entorno, l√≠mites de CPU/RAM.
- Preferencia de ORM/Query Builder (Prisma recomendado; o Knex/Sequelize/raw).
- Requisitos de seguridad (CORS dominios, JWT exp/refresh, rate‚Äëlimit, logs/auditor√≠a).

TOKENS DE CONTROL (OBLIGATORIOS) ‚Äî Fase de an√°lisis (SIN C√ìDIGO)
-----------------------------------------------------------------
Reglas
- Al finalizar cada etapa responder√©: ‚ÄúQuedo en pausa. Esperando token.‚Äù
- **No** emitir√© ning√∫n fragmento de c√≥digo ni estructuras de archivos.

Secuencia
1) TOKEN: DISCOVERY
   - Te har√© **preguntas m√≠nimas** si faltan datos clave (supuestos expl√≠citos). *Sin c√≥digo.*

2) TOKEN: ANALISIS-FRONT-A (Admin)
   - Lectura de router/hash ‚Üí cat√°logo de vistas.
   - Identificaci√≥n de **acciones UI** (CRUD, filtros, orden, paginado, modales) por m√≥dulo.
   - Mapeo **RBAC**: module_key + acci√≥n (R/W/U/D) implicadas.
   - **Salida**: **Inventario de endpoints (Admin)** y **contratos de datos preliminares**. *Sin c√≥digo.*

3) TOKEN: ANALISIS-FRONT-B (Cliente)
   - Flujos: listado ‚Üí detalle (si aplica) ‚Üí carrito ‚Üí confirmar; ofertas; estados; validaciones.
   - **Salida**: **Inventario de endpoints (Cliente)** y **contratos de datos preliminares**. *Sin c√≥digo.*

4) TOKEN: OBJETIVOS
   - Objetivos de **negocio** y **t√©cnicos** (auth, RBAC, rendimiento, seguridad, observabilidad, disponibilidad).
   - Alcance **Fase 1 (MVP)** y backlog **Fase 2/3**. *Sin c√≥digo.*

5) TOKEN: PLAN-BACKEND
   - Propuesta de **arquitectura** (MVC + servicios), **est√°ndares** (envelope de respuesta, paginaci√≥n/orden/b√∫squeda, manejo de errores, versionado API v1, CORS, JWT, RBAC server‚Äëside), **pol√≠ticas** de auditor√≠a/logs, y **workflow** del equipo. *Sin c√≥digo.*

6) TOKEN: DATA-MODEL (Conceptual)
   - **Modelo conceptual** (ER de alto nivel) y tablas propuestas (texto, sin SQL).
   - Campos clave, relaciones y reglas (unique, FK, cascadas, soft delete si aplica). *Sin c√≥digo.*

7) TOKEN: API-SCOPE (Alcance de API)
   - **Listado de recursos** y **operaciones necesarias** (por Admin/Cliente), con pre/post‚Äëcondiciones y errores t√≠picos.
   - **RBAC mapping**: cada operaci√≥n ‚Üî (module_key, acci√≥n). *Sin c√≥digo.*

8) TOKEN: RIESGOS
   - Matriz de **riesgos y mitigaciones** (datos, seguridad, escalabilidad, tiempos). *Sin c√≥digo.*

9) TOKEN: ROADMAP
   - Iteraciones y prioridades (I0 planificaci√≥n, I1 auth+RBAC, I2 categories, I3 products, I4 orders/cart, I5 admin extra, I6 observabilidad, I7 hardening, I8 deploy). *Sin c√≥digo.*

10) TOKEN: DOCS
    - Set documental: **/docs/backend/** con: decisiones (ADR), esquema conceptual ER, alcance de API (texto), pol√≠ticas de errores, checklist de seguridad, matriz Front‚ÜîAPI‚ÜîRBAC, plan de migraci√≥n JSON/LS‚ÜíDB. *Sin c√≥digo.*

11) TOKEN: APPROVE-PLAN
    - Confirmaci√≥n final del **plan** (sin iniciar construcci√≥n). *Sin c√≥digo.*

Qu√© informaci√≥n vamos a extraer del Front (plantilla)
-----------------------------------------------------
- **Rutas y vistas** (hash/router).
- **M√≥dulos y acciones** (UI) por vista.
- **Entidades y atributos** usados (ej. Product: id, name, price, categoryId, isOffer, discount, status‚Ä¶).
- **Validaciones** (√∫nicos, rangos, formatos) y **reglas de negocio** (ej. no eliminar √∫ltima categor√≠a con productos sin reasignaci√≥n).
- **Estados de UI** (loading/empty/error) y mensajes.
- **Dependencias cruzadas** (ej. Users ‚Üî RBAC; Products ‚Üî Categories).
- **RBAC** actual (semilla + overrides) y su impacto en UI.
- **Necesidades no cubiertas** para Fase 1 de API (paginaci√≥n real, orden server‚Äëside, b√∫squeda, auditor√≠a).

Vista general del flujo (alto nivel)
-----------------------------------
SPA (Cliente/Admin) ‚Üí Auth (JWT) ‚Üí Guard RBAC (Front) ‚Üí Request API ‚Üí Middlewares (authJWT ‚Üí rbacGuard(module_key, action) ‚Üí validator) ‚Üí Controller ‚Üí Service ‚Üí Repository/DB ‚Üí Envelope de respuesta ‚Üí Snackbar/UI.

Base de Datos (MySQL) ‚Äî l√≠nea gu√≠a conceptual
---------------------------------------------
- Identidades sugeridas: **users**, **roles**, **permissions/role_permissions**, **categories**, **products**, **orders**, **order_items**, **audit_logs**. *(Sin SQL)*
- Reglas destacadas: email √∫nico, slug √∫nico, FK consistentes, DECIMAL para precios, timestamps, timezone, collation.
- Discusiones pendientes: UUID vs autoincrement, soft delete, cascadas, √≠ndices para b√∫squedas/orden.

Tecnolog√≠as ‚Äî pros y contras (para el an√°lisis)
-----------------------------------------------
- **Express**: (+) flexible y est√°ndar; (‚Äì) requiere convenciones s√≥lidas.
- **MySQL**: (+) soporte amplio y costos previsibles; (‚Äì) cuidar timezone/collation/DECIMAL.
- **Prisma** (opcional): (+) DX, migraciones/seeds; (‚Äì) menos control fino SQL.
- **Knex**: (+) control SQL; (‚Äì) m√°s boilerplate.
- **Sequelize**: (+) maduro; (‚Äì) curva de aprendizaje/overhead.

Estructura ideal (conceptual, sin scaffolding)
----------------------------------------------
- Capas: **routes ‚Üí controllers ‚Üí services ‚Üí repositories(DB)** + **validators** + **middlewares (authJWT, rbacGuard, errorHandler)** + **utils/logging**.
- Documentaci√≥n: **OpenAPI** (descriptiva, sin implementar), Postman collection a generar en fase posterior.
- Configuraci√≥n: `.env` (DB_URL, JWT_SECRET, JWT_EXPIRES_IN, CORS_ORIGIN, LOG_LEVEL, PORT, TZ).

Criterios de √©xito (Fase de An√°lisis)
-------------------------------------
- Inventarios Front (Admin/Cliente) consolidados y verificados.
- Objetivos y alcance del Backend definidos (MVP + backlog).
- Modelo de datos conceptual acordado.
- Alcance de API documentado (operaciones por recurso).
- Riesgos/mitigaciones y roadmap acordados.
- Set documental inicial creado.

Frase de arranque (copiar tal cual)
-----------------------------------
TOKEN: DISCOVERY ‚Äî Nuevo chat ‚ÄúBackend ‚Äì Men√∫ Digital ‚Äì La Fileto (Plan)‚Äù.
Arranco con **TANDA A (Admin SPA + RBAC)**. Voy a adjuntar:
- router/renderView/index/global.css + helpers/modals/snackbar/auth/rbac
- m√≥dulos Admin (users, products, categories, dashboard, login)
- rbac_permissions.json
Objetivo: levantar inventario de endpoints/contratos y mapa RBAC sin producir c√≥digo.
(Despu√©s paso a **TANDA B** para Cliente y datos mock; y **TANDA C** para restricciones y entorno.)






-------------------------------------------------------------------------------------------------------------------



SUPER PROMPT ‚Äî BUILD I1 (Auth & RBAC)

Contexto (fijo)
- Proyecto: Men√∫ Digital ‚Äì La Fileto (Cliente + Admin SPA).
- Backend: Node.js + Express + MySQL, arquitectura MVC + Services + Repositories, RBAC server-side.
- Convenciones: nombres en ingl√©s (c√≥digo), comentarios y documentaci√≥n en espa√±ol.
- Est√°ndares: envelope de respuesta, paginaci√≥n/orden/b√∫squeda com√∫n, manejador de errores uniforme, JWT (access), soft-delete (deletedAt).
- Seguridad: CORS (allowlist), rate-limit (login/p√∫blico), sanitizaci√≥n, l√≠mites de body/timeout.
- Documentaci√≥n viva en /docs/backend/ + OpenAPI v1 + Postman.
- Este build no debe romper el Front; respetar par√°metros esperados por las SPAs.

Objetivo del prompt (I1)
- Implementar autenticaci√≥n y RBAC m√≠nimos operativos:
  ‚Ä¢ Auth: login (email/password), me (perfil + permisos efectivos).
  ‚Ä¢ RBAC: roles (list/create/update), modules (list), permissions by role (read/save).
  ‚Ä¢ Middlewares: authJWT, rbacGuard(module_key, action), validator, errorHandler, requestId.
  ‚Ä¢ Seeds: roles (admin/supervisor), modules (cat√°logo), role_permissions (seed), admin user, settings (isOpen=false, whatsAppNumber=null).
  ‚Ä¢ Rate-limit login y CORS (dev).
  ‚Ä¢ Envelope y taxonom√≠a de errores acordada (c√≥digos estables).

Reglas (en este chat S√ç generamos c√≥digo)
- C√≥digo en ingl√©s, comentarios/docs en espa√±ol.
- Capas obligatorias: routes ‚Üí controllers ‚Üí services ‚Üí repositories ‚Üí middlewares ‚Üí validators ‚Üí utils ‚Üí config.
- Sin frameworks tipo Nest; usar Express. ORM recomendado: Prisma (alternativa: Knex). Migraciones y seeds obligatorios.
- Respuestas siempre con envelope: { ok, data?, error?, meta? }.
- Cada token entrega artefactos listos (c√≥digo, migraciones, seeds, docs, pruebas). Nada de ‚Äúluego lo hago‚Äù.
- Si un token excede 10 archivos, fraccionar en sub-tokens (I1-ENDPOINTS-A / I1-ENDPOINTS-B, etc.).

TANDAS DE AN√ÅLISIS (solo si hace falta revisar Front; m√°x. 10 archivos por token)
TOKEN: FE-ANALISIS-I1-A (hasta 10 archivos)
- /admin/src/utils/rbac.js
- /admin/public/data/rbac_permissions.json
- /admin/src/utils/auth.js
- /admin/src/utils/router.js
- /admin/index.html
- /admin/src/components/users/* (hasta completar 10)

(Si hiciera falta m√°s, usar FE-ANALISIS-I1-B, etc., respetando el tope de 10 archivos por token.)

TOKENS DE CONTROL (OBLIGATORIOS)
1) TOKEN: I1-SETUP
   Entregables:
   - README-dev-setup.md (pasos locales), .env.example (sin secretos), package.json con scripts (lint, dev, build, test).
   - Config de CORS (dev) y rate-limit (login).
   - Estructura inicial de carpetas.

2) TOKEN: I1-DB-SCHEMA+MIGRATIONS
   Entregables:
   - Esquema (Prisma o SQL) para: users, roles, modules, role_permissions, settings, audit_logs.
   - Migraciones iniciales.
   - Seeds: roles, modules, role_permissions, admin user, settings.
   - Nota de collation/TZ y DECIMAL.

3) TOKEN: I1-MIDDLEWARES
   Entregables:
   - authJWT, rbacGuard(module_key, action), validator, errorHandler, requestId, rateLimiterLogin.
   - Utilidad de envelope y tabla de error codes.

4) TOKEN: I1-ENDPOINTS
   Entregables (c√≥digo + tests unitarios m√≠nimos de service):
   - POST /auth/login, GET /auth/me
   - GET /rbac/roles, POST /rbac/roles, PUT /rbac/roles/:roleId
   - GET /rbac/modules
   - GET /rbac/roles/:roleId/permissions, PUT /rbac/roles/:roleId/permissions
   - Auditor√≠a permission_change

5) TOKEN: I1-TESTS+POSTMAN
   Entregables:
   - Tests unitarios (services) y 2‚Äì3 de integraci√≥n (auth/rbac).
   - Colecci√≥n Postman con ejemplos (200/4xx) y variables.
   - Script npm run test pasando en verde.

6) TOKEN: I1-DOCS+ZIP
   Entregables:
   - OpenAPI v1 (solo endpoints de I1).
   - Actualizaci√≥n /docs/backend/* (ADRs, pol√≠ticas si algo cambi√≥).
   - ZIP con el build de I1 (c√≥digo + migraciones + seeds + docs + Postman).

Lo que vamos a lograr (criterios de salida de I1)
- Login y Me funcionales (JWT), con lockout por intentos fallidos.
- RBAC por rol operativo (crear rol, editar permisos; rbacGuard haciendo cumplir).
- Seeds listos para levantar un entorno nuevo en minutos.
- Postman y tests m√≠nimos en verde.
- OpenAPI v1 actualizado.

Esquema de datos (I1)
- Users: id, fullName, email (unique), passwordHash, roleId, status, failedLoginAttempts, lockUntil, createdAt, updatedAt, deletedAt.
- Roles: roleId (string), name, createdAt, updatedAt.
- Modules: moduleKey (string), name, createdAt, updatedAt.
- RolePermissions: roleId, moduleKey, r,w,u,d, updatedAt (unique por par).
- Settings: key, value(JSON/string), updatedAt (keys: isOpen, whatsAppNumber).
- AuditLogs: id, actorUserId?, action, entity, entityId, summary, changedFields(JSON), createdAt.

Validaciones clave (I1)
- Login: email v√°lido, password presente; rate-limit 10 req/15min por IP; lockout tras intentos fallidos.
- Users: email √∫nico; status (active|inactive).
- RBAC: roleId existente; moduleKey del cat√°logo; r,w,u,d booleanos.
- Errores y HTTP: 401 AUTH_REQUIRED/INVALID, 403 PERMISSION_DENIED, 404 RESOURCE_NOT_FOUND, 409 CONFLICT, 422 VALIDATION_ERROR, 429 RATE_LIMITED.

Estructura esperada (salida)
/backend
  /src
    /routes        # rutas + (module_key, action)
    /controllers   # orquestaci√≥n + envelope
    /services      # reglas de negocio (auth, rbac, settings)
    /repositories  # acceso DB
    /middlewares   # authJWT, rbacGuard, validator, errorHandler, requestId, rateLimiterLogin
    /validators    # schemas
    /utils         # helpers (hash, envelope, error codes)
    /config        # env, cors, logger
  /prisma|/db      # schema, migrations, seeds
  /tests           # unit e integraci√≥n
  /docs/backend    # OpenAPI, ADRs, policies, runbook
  package.json, .env.example, README-dev-setup.md

Checklist de PRUEBAS (I1)
- Postman (manual):
  ‚Ä¢ Login 200 con admin seed ‚Üí token.
  ‚Ä¢ Me 200 con effectivePermissions.
  ‚Ä¢ Roles list 200; create 201; update 200.
  ‚Ä¢ Modules list 200.
  ‚Ä¢ Permissions read/save 200; audit registrado.
  ‚Ä¢ Ruta protegida con rol sin permiso ‚Üí 403.
  ‚Ä¢ 10 logins fallidos seguidos ‚Üí 429 / bloqueo temporal.
- Unit (services): auth (password ok/no), rbac (permisos v√°lidos/ inv√°lidos), settings (lectura).
- Integraci√≥n (m√≠n): login‚Üíme; save permissions‚Üíaudit.

Entrega documental (I1)
- OpenAPI v1 (Auth + RBAC + Settings b√°sico).
- Colecci√≥n Postman.
- /docs/backend/ actualizada: adr-001-auth-jwt.md, adr-002-rbac-por-rol.md, error-policy.md, rbac-policy.md, environments.md, release-checklist.md.
- Changelog de I1.
- ZIP final: backend_I1.zip.

Notas finales
- Si es necesario revisar el Front para alinear permisos/vistas, usar los tokens FE-ANALISIS-I1-* (m√°x. 10 archivos por token).
- Mantener nombres en ingl√©s y documentaci√≥n en espa√±ol en todo el c√≥digo entregado durante el build.







-------------------------------------------------------------------------------------------------------------------


"""SUPER PROMPT ‚Äî BUILD I2 (Categories) ‚Äî v2
(Con pre-chequeo de I1 y an√°lisis de Front al inicio y al cierre)


CONTEXTO (fijo)
- Proyecto: Men√∫ Digital ‚Äì La Fileto (Cliente + Admin SPA).
- Backend: Node.js + Express + MySQL, arquitectura MVC + Services + Repositories, RBAC server-side.
- Convenciones: nombres en ingl√©s (c√≥digo), comentarios y docs en espa√±ol.
- Est√°ndares: envelope { ok, data?, error?, meta? }, paginaci√≥n/orden/b√∫squeda, error policy (c√≥digos estables).
- Seguridad: JWT access, authJWT, rbacGuard(module_key, action), CORS allowlist, rate-limit, sanitizaci√≥n, l√≠mites de body/timeout.
- Sin frameworks tipo Nest; Express puro; ORM recomendado Prisma; migraciones y seeds obligatorios.
- Reglas ya acordadas: status=active|inactive; soft-delete con deletedAt; p√∫blico name ASC; pageSize default 20, m√°x 100.

OBJETIVO DEL PROMPT (I2)
Implementar Categories para Admin y P√∫blico sin romper lo de I1:
- Admin (module_key: 'categories'): list/create/update/delete/restore (+ toggle status si aplica).
- P√∫blico: list (solo activas, orden name ASC).
- B√∫squeda q por name, paginaci√≥n y orden (name|createdAt), filtros por status.
- Auditor√≠a: create/update/delete/restore.
- Reglas de negocio: unicidad de name ‚Äúentre activas‚Äù; delete preparado para 409 CATEGORY_REASSIGN_REQUIRED (stub hasta I3).

REGLAS (en este chat S√ç generamos c√≥digo)
- C√≥digo en ingl√©s; comentarios y documentaci√≥n en espa√±ol.
- Capas: routes ‚Üí controllers ‚Üí services ‚Üí repositories ‚Üí middlewares ‚Üí validators ‚Üí utils ‚Üí config.
- Reusar helpers/middlewares de I1 (no duplicar envelope, errores, paginaci√≥n).
- Contratos y errores exactamente como I1; nuevos errores deben justificarse.
- Si un token supera 10 archivos, fraccionar (I2-ENDPOINTS-A, I2-ENDPOINTS-B).

‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî

PRE-TOKEN OBLIGATORIO: I2-PRECHECK-I1 (sin c√≥digo)
Objetivo: inventariar reusos de I1 para no reescribir nada en I2.
Adjuntar (m√°x. 10 archivos):
1) src/middlewares/authJWT
2) src/middlewares/rbacGuard
3) src/middlewares/errorHandler
4) src/middlewares/requestId
5) src/utils/envelope
6) src/utils/error-codes
7) src/utils/pagination  (si existe; si no, c√≥mo se resuelve en I1)
8) src/validators/_shared  (convenciones con Zod, si aplica)
9) src/config/env         (carga .env, CORS)
10) src/routes/index      (patr√≥n /api/v1 y montaje admin/p√∫blico)

Salida esperada (1 p√°gina m√°x):
- Reusos obligatorios: nombres de helpers/funciones y c√≥mo se invocan.
- Contrato de paginaci√≥n/orden/b√∫squeda (params y forma de meta).
- C√≥digos de error a reusar y sus HTTP.
- RBAC: confirmar module_key 'categories' y permisos por rol (Admin R/W/U/D, Supervisor R/W/U).
- Prefijos de rutas: admin /admin/categories ; p√∫blico /categories.

‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî

AN√ÅLISIS DEL FRONT (mini al inicio y verificaci√≥n al final)
‚Ä¢ FE-AN√ÅLISIS-I2-A (inicio, m√°x. 10 archivos) ‚Äî si hace falta
  - /admin/src/main.js
  - /admin/src/utils/router.js
  - /admin/src/utils/renderView.js
  - /admin/src/modules/categories/* (HTML/CSS/JS del m√≥dulo)
  - /admin/src/utils/rbac.js
  - /admin/src/utils/helpers.js
  - /admin/index.html
  - /client/src/main.js (si home muestra categor√≠as)
  - /client/src/utils/renderView.js
  - /public/data/categories.json (si existe)
  Salida: contratos UI (params q/status/orderBy/orderDir/page/pageSize/includeDeleted), orden por defecto name ASC, mensajes de vac√≠o/error.

‚Ä¢ FE-VERIFICACI√ìN-I2 (final, mini)
  - Probar Front contra API: p√∫blico list name ASC, Admin CRUD + soft-delete, manejo de 409 CATEGORY_REASSIGN_REQUIRED (mock en I2).

‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî

CONTRACT LOCK (congelado de contrato con I1)
- Envelope fijo: { ok, data?, error?, meta? }
- Meta de listados: { page, pageSize, total, orderBy, orderDir, q, filters }
- Query params (whitelist):
  ‚Ä¢ page ‚â•1 ; pageSize 1..100 (default 20)
  ‚Ä¢ orderBy ‚àà { name, createdAt } ; orderDir ‚àà { asc, desc }
  ‚Ä¢ q  (aplica a name)
  ‚Ä¢ status ‚àà { active, inactive }
  ‚Ä¢ includeDeleted=true  (solo Admin)
- Orden secundario determinista: si orderBy=name empata, usar createdAt ASC.
- Errores a usar: VALIDATION_ERROR(422), CATEGORY_REASSIGN_REQUIRED(409), RESOURCE_NOT_FOUND(404), CONFLICT(409), PERMISSION_DENIED(403), AUTH_REQUIRED/INVALID(401), RATE_LIMITED(429).

NO TOCAR (guardrails de I1)
- Envelope, error codes, middlewares y su orden, CORS/rate-limit, montaje /api/v1, RBAC y seeds de I1.
- Nombres de campos y convenciones: status, deletedAt, createdAt, updatedAt.

‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî

TOKENS DE CONTROL (OBLIGATORIOS)
1) TOKEN: I2-DB-SCHEMA+MIGRATIONS
   Entregables:
   - Esquema (Prisma/SQL) para categories: id (PK), name (unique entre activas a nivel service), status, createdAt, updatedAt, deletedAt.
   - √çndices: name, status.
   - Migraci√≥n nueva (sin romper I1).
   - Seeds de prueba (3‚Äì5 categor√≠as; ver ‚ÄúSeeds de prueba‚Äù).

2) TOKEN: I2-VALIDATORS
   Entregables:
   - Schemas zod/u otro: create/update/list (name requerido 1..80, status enum).
   - Normalizaci√≥n: trim, collapse spaces, Unicode NFKC, lower para b√∫squedas.
   - Mensajes claros de validaci√≥n (espa√±ol).

3) TOKEN: I2-ENDPOINTS-ADMIN
   Entregables (c√≥digo + unit tests de service):
   - GET /admin/categories  ‚Üí page,pageSize,orderBy=name|createdAt,orderDir,q,status,includeDeleted?
   - POST /admin/categories ‚Üí create (validaciones + audit create)
   - PUT /admin/categories/:id ‚Üí update (unicidad entre activas + audit update)
   - DELETE /admin/categories/:id ‚Üí soft-delete (stub de conteo productos ‚áí 409 si >0 + audit delete si procede)
   - PUT /admin/categories/:id/restore ‚Üí restore (status='active' + audit update)

4) TOKEN: I2-ENDPOINTS-PUBLIC
   Entregables:
   - GET /categories  ‚Üí solo activas, orden name ASC (+ createdAt ASC como desempate), page/pageSize, q por name.

5) TOKEN: I2-TESTS+POSTMAN
   Entregables:
   - Unit (services): unicidad entre activas; delete con/sin productos (mock); list con filtros/orden.
   - Integraci√≥n: admin ciclo create‚Üíupdate‚Üídelete‚Üírestore; p√∫blico list.
   - Postman: carpeta Categories (200/4xx), usa {{JWT}} de I1; ejemplos con includeDeleted, q, status.

6) TOKEN: FE-VERIFICACI√ìN-I2 (final)
   Entregables:
   - Sanity UI: Front Admin y Cliente apuntando a API; flujo de listado/CRUD/soft-delete ok; snackbar maneja errores mapeados.

7) TOKEN: I2-DOCS+ZIP
   Entregables:
   - OpenAPI v1 actualizado (rutas admin + p√∫blico de categories).
   - /docs/backend/ actualizado (api-scope.md, er-conceptual.md si cambi√≥ algo, changelog I2).
   - ZIP backend_I2.zip con c√≥digo + migraciones + seeds + docs + Postman.

‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî

ESQUEMA DE DATOS (I2)
- Categories:
  ‚Ä¢ id (PK)
  ‚Ä¢ name (√∫nico ‚Äúentre activas‚Äù: validar en service; case-insensitive)
  ‚Ä¢ status (active|inactive)
  ‚Ä¢ createdAt, updatedAt, deletedAt (soft-delete)
- √çndices: name, status.

VALIDACIONES CLAVE (I2)
- name: requerido, 1..80, trim/collapse, case-insensitive para unicidad activa.
- status: enum 'active' | 'inactive'.
- Listados: pageSize 1..100; orderBy whitelisted; q sobre name (lower/trim).
- Delete: si countProductsByCategory(id) > 0 ‚áí 409 CATEGORY_REASSIGN_REQUIRED.
- Restore: set status='active'; limpiar deletedAt.

PUNTO DE EXTENSI√ìN (stub I2 ‚Üí real en I3)
- countProductsByCategory(categoryId): en I2 devolver 0 (o mock en tests). En I3 se implementa contra products.

SEEDS DE PRUEBA (I2)
- Categor√≠as: 'Parrilla' (active), 'Pastas' (active), 'Bebidas' (active), 'Veggie' (inactive), 'Postres' (active).
- Dise√±adas para probar: q (p.ej., 'as'), orden por name con acentos, y filtros por status.

‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî

ESTRUCTURA ESPERADA (salida orientativa)
/backend
  /src
    /routes/categories.routes.js
    /controllers/categories.controller.js
    /services/categories.service.js
    /repositories/categories.repository.js
    /validators/categories.validators.js
  /tests/categories/  (unit + integraci√≥n)
  /docs/backend/openapi.yaml (actualizado)

CHECKLIST DE PRUEBAS (I2)
‚Ä¢ Postman (manual):
  - Admin: GET /admin/categories (paginado; q; status; includeDeleted).
  - Admin: POST /admin/categories ‚Üí 201; duplicado name activo ‚Üí 422.
  - Admin: PUT /admin/categories/:id ‚Üí update name; colisi√≥n activa ‚Üí 422.
  - Admin: DELETE /admin/categories/:id ‚Üí 200 si sin productos; si con productos ‚Üí 409 CATEGORY_REASSIGN_REQUIRED.
  - Admin: PUT /admin/categories/:id/restore ‚Üí vuelve a active.
  - P√∫blico: GET /categories ‚Üí solo activas; orden name ASC (+ createdAt ASC de desempate); page/pageSize.
‚Ä¢ Unit (services):
  - Unicidad entre activas (create/update).
  - Delete con/sin productos (mock).
  - Paginaci√≥n + orden por name.
‚Ä¢ Integraci√≥n:
  - Ciclo create ‚Üí update ‚Üí delete ‚Üí restore (auditor√≠a presente).
  - P√∫blico list de activas.

ENTREGA DOCUMENTAL (I2)
- OpenAPI v1 ampliado (categor√≠as admin/p√∫blico).
- Colecci√≥n Postman actualizada (carpeta Categories).
- /docs/backend/ actualizado: api-scope.md, er-conceptual.md (si hubo ajuste), changelog I2.
- ZIP backend_I2.zip.

‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî ‚Äî

MINI TABLA Front ‚Üî API (filtros y errores ‚Üí snackbar)

FILTROS / QUERIES
| Front (param)     | API (query)     | Tipo/valores         | Ejemplo                                 |
|-------------------|-----------------|----------------------|------------------------------------------|
| B√∫squeda          | q               | string (trim, lower) | ?q=pasta                                 |
| Estado            | status          | active|inactive      | ?status=active                           |
| P√°gina            | page            | int ‚â•1               | ?page=2                                  |
| Tama√±o            | pageSize        | 1..100 (default 20)  | ?pageSize=20                             |
| Ordenar por       | orderBy         | name|createdAt       | ?orderBy=name                            |
| Direcci√≥n orden   | orderDir        | asc|desc             | ?orderDir=asc                            |
| Incluir borrados* | includeDeleted  | true|false (Admin)   | ?includeDeleted=true                     |

ERRORES ‚Üí SNACKBAR (mensaje en espa√±ol)
| error.code                 | HTTP | Mensaje sugerido (UI)                                       |
|---------------------------|------|--------------------------------------------------------------|
| VALIDATION_ERROR          | 422  | Rev√≠s√° los datos: hay campos inv√°lidos.                     |
| CATEGORY_REASSIGN_REQUIRED| 409  | No pod√©s eliminar: hay productos asociados. Reasign√° primero.|
| RESOURCE_NOT_FOUND        | 404  | El recurso no existe o fue eliminado.                        |
| PERMISSION_DENIED         | 403  | No ten√©s permisos para esta acci√≥n.                          |
| AUTH_REQUIRED             | 401  | Inici√° sesi√≥n para continuar.                                |
| AUTH_INVALID              | 401  | Tu sesi√≥n expir√≥. Volv√© a iniciar sesi√≥n.                    |
| CONFLICT                  | 409  | Operaci√≥n en conflicto. Revis√° los datos.                    |
| RATE_LIMITED              | 429  | Demasiadas solicitudes. Prob√° de nuevo en unos minutos.      |

*401 en rutas admin*: redirigir a login. *403*: mostrar vista ‚Äúsin acceso‚Äù.  
*Empty state p√∫blico*: ‚ÄúNo hay categor√≠as disponibles por el momento.‚Äù

FIN DEL PROMPT
